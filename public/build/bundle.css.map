{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Calculator.svelte",
    "ModalTooltip.svelte",
    "NumberPicker.svelte",
    "ToggleButtons.svelte",
    "TooltipIcon.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import ToggleButtons from './ToggleButtons.svelte';\r\nimport NumberPicker from './NumberPicker.svelte';\r\nimport TooltipIcon from './TooltipIcon.svelte';\r\n;\r\nimport { CardsOnTable, SpecialFieldType, cardsOnTableooltipHtml, footerTooltipHtml, countableFieldGroups, meldsStyleButtons } from './config';\r\nlet fieldGroups = [...countableFieldGroups];\r\nlet meldsStyle = null;\r\nlet score = 0;\r\nfunction updateScore() {\r\n    score = 0;\r\n    // Melds\r\n    switch (meldsStyle) {\r\n        case CardsOnTable.ALL:\r\n            score += 100;\r\n            break;\r\n        case CardsOnTable.ALL_AT_ONCE:\r\n            score += 200;\r\n    }\r\n    fieldGroups.forEach(group => {\r\n        group.fields.forEach(field => {\r\n            if (field.specialFieldType === SpecialFieldType.RED_THREE) {\r\n                // Red threes\r\n                if (meldsStyle === CardsOnTable.ALL || meldsStyle === CardsOnTable.ALL_AT_ONCE || meldsStyle === CardsOnTable.SOME) {\r\n                    score += field.count === 4 ? 800 : field.count * 100;\r\n                }\r\n                else {\r\n                    score -= field.count === 4 ? 800 : field.count * 100;\r\n                }\r\n            }\r\n            else {\r\n                // Standard numeric values\r\n                score += field.count * field.score;\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction resetScore() {\r\n    meldsStyle = null;\r\n    fieldGroups.forEach(group => {\r\n        group.fields.forEach(field => {\r\n            field.count = 0;\r\n        });\r\n    });\r\n    updateScore();\r\n}\r\nfunction updateMeldsStyle(event) {\r\n    meldsStyle = event.detail;\r\n    if (meldsStyle === CardsOnTable.ALL || meldsStyle === CardsOnTable.ALL_AT_ONCE) {\r\n        fieldGroups.forEach(group => {\r\n            group.fields.forEach(field => {\r\n                if (field.score < 0) {\r\n                    field.count = 0;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    if (meldsStyle === CardsOnTable.NONE) {\r\n        fieldGroups.forEach(group => {\r\n            group.fields.forEach(field => {\r\n                if (field.score > 0 && field.specialFieldType !== SpecialFieldType.RED_THREE) {\r\n                    field.count = 0;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    updateScore();\r\n}\r\nfunction updateCount(field, value) {\r\n    fieldGroups = fieldGroups.map(group => {\r\n        return Object.assign(Object.assign({}, group), { fields: group.fields.map(f => {\r\n                if (f === field) {\r\n                    return Object.assign(Object.assign({}, f), { count: value });\r\n                }\r\n                return Object.assign({}, f);\r\n            }) });\r\n    });\r\n    updateScore();\r\n}\r\n</script>\r\n\r\n<div class=\"calculator\">\r\n  <div class=\"form\">\r\n    <div class=\"row\">\r\n      <div class=\"field-label\">Wyłożono karty: <TooltipIcon text={cardsOnTableooltipHtml} heading='Wyłożone karty' /></div>\r\n\r\n      <ToggleButtons items={meldsStyleButtons} value={meldsStyle} on:change={updateMeldsStyle} />\r\n    </div>\r\n\r\n    {#each fieldGroups as group}\r\n      {#if group.fields.reduce((result, field) => {\r\n        return [\r\n          ...result,\r\n          ...field.visibleFor\r\n        ]\r\n      }, []).includes(meldsStyle)}\r\n        <div class=\"separator\" />\r\n\r\n        <div class=\"two-columns\">\r\n          {#each group.fields as field}\r\n            {#if field.visibleFor.includes(meldsStyle)}\r\n              <div class=\"row\">\r\n                <div class=\"field-label\">\r\n                  {field.label} <TooltipIcon text={field.tooltipHtml} heading={field.label} />:\r\n                </div>\r\n\r\n                <NumberPicker\r\n                  value={field.count}\r\n                  on:change={event => updateCount(field, event.detail)}\r\n                  max={field.maxCount} />\r\n              </div>\r\n            {/if}\r\n          {/each}\r\n        </div>\r\n      {/if}\r\n    {/each}\r\n\r\n    <div class=\"footer panel panel-dark\">\r\n      <div class=\"score\">Wynik: <span class=\"score-value\">{score}</span></div>\r\n\r\n      <TooltipIcon text={footerTooltipHtml} heading='Minimalna ilość punktów' size={24} />\r\n\r\n      <div class=\"reset-button\"><button class=\"btn btn-primary\" on:click={resetScore}>Wyczyść</button></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .form {\r\n    padding: 1rem;\r\n    margin-bottom: 4rem;\r\n  }\r\n\r\n  .row {\r\n    margin-bottom: 0.75rem;\r\n  }\r\n\r\n  .two-columns {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-column-gap: 2rem;\r\n  }\r\n\r\n  .field-label {\r\n    font-size: 0.75rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  .footer {\r\n    position: fixed;\r\n    bottom: 0.25rem;\r\n    left: 0.25rem;\r\n    right: 0.25rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .score-value {\r\n    font-weight: bold;\r\n  }\r\n\r\n  .separator {\r\n    width: 50%;\r\n    margin: auto;\r\n    border-top: 1px solid #c6c8ca;\r\n    margin-bottom: 0.5rem;\r\n    margin-top: 0.5rem;\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\r\nconst dispatch = createEventDispatcher();\r\nexport let text;\r\nexport let heading = 'Wskazówka';\r\n</script>\r\n\r\n<div class=\"modal-tooltip\">\r\n  <div class=\"overlay\"></div>\r\n  <div class=\"modal-container\">\r\n    <div class=\"tooltip-content\">\r\n      <div class=\"header\">\r\n        {heading}\r\n        <div class=\"close-icon\" on:click={() => dispatch('close')}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x-circle\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line></svg>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"body\">\r\n        {@html text || 'Brak wskazówki :-('}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .modal-tooltip {\r\n    display: inline;\r\n  }\r\n\r\n  .overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    -webkit-filter: blur(2px);\r\n    -moz-filter: blur(2px);\r\n    -o-filter: blur(2px);\r\n    -ms-filter: blur(2px);\r\n    filter: blur(2px);\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 1;\r\n  }\r\n\r\n  .modal-container {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 2;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 2;\r\n  }\r\n\r\n  .tooltip-content {\r\n    border-radius: 0.25rem;\r\n    background-color: #fff;\r\n    border: 1px solid rgba(0, 0, 0, 0.125);\r\n    max-width: 80vw;\r\n  }\r\n\r\n  .header {\r\n    position: relative;\r\n    padding: .5rem .75rem;\r\n    padding-right: 2.5rem;\r\n    margin-bottom: 0;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    background-color: #f7f7f7;\r\n    border-bottom: 1px solid #ebebeb;\r\n    border-top-left-radius: 0.25rem;\r\n    border-top-right-radius: 0.25rem;\r\n  }\r\n\r\n  .close-icon {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    right: 0.25rem;\r\n    top: 0.5rem;\r\n  }\r\n\r\n  .body {\r\n    font-size: 0.875rem;\r\n    padding: 0.5rem 0.75rem;\r\n  }\r\n</style>",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\r\nexport let max = 99;\r\nexport let value = null;\r\nconst dispatch = createEventDispatcher();\r\nfunction decrement() {\r\n    if (value === null) {\r\n        dispatch('change', 0);\r\n    }\r\n    if (value > 0) {\r\n        dispatch('change', value - 1);\r\n    }\r\n}\r\nfunction increment() {\r\n    if (value === null) {\r\n        dispatch('change', 0);\r\n    }\r\n    if (max === null || typeof max === 'undefined' || value < max) {\r\n        dispatch('change', value + 1);\r\n    }\r\n}\r\n</script>\r\n\r\n<div class=\"number-picker\">\r\n  <button class=\"decrement btn btn-primary\" on:click={decrement}>-</button>\r\n  <div class=\"value\">{value}</div>\r\n  <button class=\"increment btn btn-primary\" on:click={increment}>+</button>\r\n</div>\r\n\r\n<style>\r\n  .number-picker {\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #d6d8d9;\r\n    border-radius: 0.25rem;\r\n    padding: 0.25rem;\r\n  }\r\n\r\n  .decrement,\r\n  .value,\r\n  .increment {\r\n    flex: 1;\r\n  }\r\n\r\n  .value {\r\n    font-size: 1.2rem;\r\n    display: flex;\r\n    place-content: center;\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\r\n;\r\nexport let items;\r\nexport let value = null;\r\nconst dispatch = createEventDispatcher();\r\nfunction toggle(item) {\r\n    dispatch('change', item.value);\r\n}\r\n</script>\r\n\r\n<div class=\"toggle-buttons\">\r\n  {#each items as item}\r\n    <button\r\n      class=\"button btn btn-sm\"\r\n      class:btn-primary={value === item.value}\r\n      class:btn-secondary={value !== item.value}\r\n      on:click={() => toggle(item)}>{item.label}</button>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  .toggle-buttons {\r\n    display: flex;\r\n    width: 100%;\r\n  }\r\n\r\n  .button {\r\n    flex: 1 auto;\r\n    margin-right: 0.25rem;\r\n  }\r\n\r\n  .button:last-child {\r\n    margin-right: 0;\r\n  }\r\n\r\n  @media (max-width: 400px) {\r\n    .toggle-buttons {\r\n      display: grid;\r\n      grid-template-columns: 1fr 1fr;\r\n      grid-gap: 0.25rem;\r\n      width: 100%;\r\n    }\r\n\r\n    .button {\r\n      flex: unset;\r\n      margin-right: 0;\r\n    }\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import ModalTooltip from \"./ModalTooltip.svelte\";\r\nexport let text;\r\nexport let heading = 'Wskazówka';\r\nexport let size = 16;\r\nlet isModalVisible = false;\r\n</script>\r\n\r\n<div class=\"tooltip-icon\">\r\n  <span\r\n    class=\"icon\"\r\n    on:click={() => isModalVisible = true}\r\n  ><svg xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg></span>\r\n</div>\r\n\r\n{#if isModalVisible}\r\n  <ModalTooltip {text} {heading} on:close={() => isModalVisible = false} />\r\n{/if}\r\n\r\n<style>\r\n  .tooltip-icon {\r\n    position: relative;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .icon {\r\n    position: relative;\r\n    top: 0.2rem;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA+HE,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,aAAa,CAAE,OAAO,AACxB,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,SAAS,CAAE,OAAO,CAClB,aAAa,CAAE,MAAM,AACvB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,KAAK,CACf,MAAM,CAAE,OAAO,CACf,IAAI,CAAE,OAAO,CACb,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,AAChC,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,aAAa,CAAE,MAAM,CACrB,UAAU,CAAE,MAAM,AACpB,CAAC;AC9ID,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,MAAM,AACjB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,KAAK,GAAG,CAAC,CACzB,WAAW,CAAE,KAAK,GAAG,CAAC,CACtB,SAAS,CAAE,KAAK,GAAG,CAAC,CACpB,UAAU,CAAE,KAAK,GAAG,CAAC,CACrB,MAAM,CAAE,KAAK,GAAG,CAAC,CACjB,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,aAAa,CAAE,OAAO,CACtB,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CACtC,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CAAC,MAAM,CACrB,aAAa,CAAE,MAAM,CACrB,aAAa,CAAE,CAAC,CAChB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,sBAAsB,CAAE,OAAO,CAC/B,uBAAuB,CAAE,OAAO,AAClC,CAAC,AAED,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,OAAO,CACd,GAAG,CAAE,MAAM,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,QAAQ,CACnB,OAAO,CAAE,MAAM,CAAC,OAAO,AACzB,CAAC;AC3DD,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,OAAO,CACtB,OAAO,CAAE,OAAO,AAClB,CAAC,AAED,wBAAU,CACV,oBAAM,CACN,UAAU,cAAC,CAAC,AACV,IAAI,CAAE,CAAC,AACT,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,MAAM,AACvB,CAAC;AC1BD,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,AACb,CAAC,AAED,OAAO,cAAC,CAAC,AACP,IAAI,CAAE,CAAC,CAAC,IAAI,CACZ,YAAY,CAAE,OAAO,AACvB,CAAC,AAED,qBAAO,WAAW,AAAC,CAAC,AAClB,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,QAAQ,CAAE,OAAO,CACjB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,OAAO,cAAC,CAAC,AACP,IAAI,CAAE,KAAK,CACX,YAAY,CAAE,CAAC,AACjB,CAAC,AACH,CAAC;AC5BD,aAAa,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,MAAM,AACb,CAAC"
}